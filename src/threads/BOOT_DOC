			+-----------------------+
			|         CS 124        |
			| PROJECT 2: BOOTLOADER |
			|    DESIGN DOCUMENT    |
			+-----------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Timothy Holland (tholland@caltech.edu)
Daniel Kong (dkong@caltech.edu)
Daniel Wang (dwang@caltech.edu)

>> Specify how many late tokens you are using on this assignment:
1 late token used.

>> What is the Git repository and commit hash for your submission?

   Repository URL:  http://github.com/dkong1796/pintos_hkw.git
   commit ...

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course instructors.

http://en.wikipedia.org/Logical_block_addressing
http://en.wikipedia.org/wiki/INT_13H
web.mit.edu/gnu/doc/html/as_7.html
docs.oracle.com/cd/E19455-01/806-3773/806-3773.pdf
f.osdev.org/viewtopic.php?f=13&t=18374

			     BOOTLOADER
			     ==========

---- DATA STRUCTURES ----

>> A1: In the order that they are used, specify the areas of memory that
>> your bootloader code uses (both starting address and size) during the
>> bootstrap process.  Briefly describe the purpose of each memory area.
>> Note that you do not have to enumerate the structure of sector data or
>> anything like that; simply state the general purpose of the various
>> memory areas used by your bootload code.

We use memory location 0x20000, which is where the kernel eventually goes,
as a buffer for reading from the disk. This buffer is used for reading MBR
sectors as well as copying the pintos kernel. 
We also define a section of memory to hold our DAP, for use with int 0x13.
We modify this area of memory to change how much the interrupt reads and
where it begins to read, while keeping some areas constant. 


---- ALGORITHMS ----

>> A2: Write a pseudocode description (e.g. at the level of Python and
>> English phrases) of the sequence of operations that your bootloader
>> performs when searching for, and then loading, the Pintos kernel.

for each hard drive:
  load the mbr
  if mbr is not found:
    report_error()
  if mbr does not have boot flag:
    continue
  for partition in mbr:
    if partition is bootable and if parition type is PINTOS:
      try:
        done = false
        while not done:
          copy next 64 KiB of kernel
          if all 512 KiB are copied:
            done = true
        # goto start
        start running kernel
      catch:
        report_error()

report_error():
  print "error: unable to find or load os. aborting."
  # interrupt 0x18
  exit

>> A3: Did you have any difficulties making the entire bootloader fit
>> within the space allotted?  If so, what steps did you take to reduce
>> the size of your bootstrap code?

Yes. Our first step was to reduce error messages from descriptive to
single character ones. The second was to try to reuse registers
more efficiently. The third was changing which registers were
used for which situation, in order to reduce the number of 
instructions (e.g. using %esi if we knew we had to do indirect addressing)

---- RATIONALE ----

>> A4: Why did you choose your final implementation?  Did you encounter
>> any major obstacles or difficulties that forced you to change your
>> approach?  If so, describe the obstacles and how you overcame them.

We found a lot of difficulty in trying to refer to areas of memory using
the 8(%ebx) syntax familiar to us. Whenever we tried doing this, Bochs would
hang, with no discernable reason for doing so. We made extensive use of %es in
combination with an offset in order to reference memory addresses to replace
this capability. Since %es requires many steps to increment or move literals
into, we worked around this by setting a variable offset in a register, and
staying in a relatively small part of memory starting at 0x20000.

In addition, when creating the DAP, we originally attempted to block off a
small bit of memory immediately before 0x20000, but this proved difficult
to actually achieve. We then moved to a stack implementation, but this 
brought up new concerns about modifying the data structure for later reads.
Finally, we used the .byte and .word directives in combination with a label
to create a data structure relatively painlessly, with an easy method of
referencing.

Other than these concerns, we stayed very close to our original ideas, which
are presented almost unaltered in the pseudocode algorithm. The overall
design of the bootloader was fairly straightforward; working around bugs,
limited documentation, and unfamiliarity with real mode were more difficult,
but overall didn't affect our design greatly.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the feedback survey on the course
website.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?
Part of why I think assembly is difficult is finding one good, complete one
stop shop for documentation. Something that has byte sizes, what flags are
affected by which instructions, restrictions on addressing in real mode, 
descriptions of directives.
So have the TAs learn everything ever about assembly, and become that
one stop shop.
At the very least, provide more guidance on int 0x13 and the DAP.
Information on the layout and creation of the DAP took forever to find.
>> Any other comments?
