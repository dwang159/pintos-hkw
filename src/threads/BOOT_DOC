			+-----------------------+
			|         CS 124        |
			| PROJECT 2: BOOTLOADER |
			|    DESIGN DOCUMENT    |
			+-----------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Timothy Holland (tholland@caltech.edu)
Daniel Kong (dkong@caltech.edu)
Daniel Wang (dwang@caltech.edu)

>> Specify how many late tokens you are using on this assignment:

>> What is the Git repository and commit hash for your submission?

   Repository URL:  http://github.com/dkong1796/pintos_hkw.git
   commit ...

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course instructors.

http://en.wikipedia.org/Logical_block_addressing
http://en.wikipedia.org/wiki/INT_13H
web.mit.edu/gnu/doc/html/as_7.html

			     BOOTLOADER
			     ==========

---- DATA STRUCTURES ----

>> A1: In the order that they are used, specify the areas of memory that
>> your bootloader code uses (both starting address and size) during the
>> bootstrap process.  Briefly describe the purpose of each memory area.
>> Note that you do not have to enumerate the structure of sector data or
>> anything like that; simply state the general purpose of the various
>> memory areas used by your bootload code.

We use memory location 0x20000, which is where the kernel eventually goes,
as a buffer for reading from the disk. This buffer is used for reading MBR
sectors as well as copying the pintos kernel. We also use the 16 bytes just
before this region (0x1fff0) as the location for the disk access packet.


---- ALGORITHMS ----

>> A2: Write a pseudocode description (e.g. at the level of Python and
>> English phrases) of the sequence of operations that your bootloader
>> performs when searching for, and then loading, the Pintos kernel.

for each hard drive:
  load the mbr
  if mbr is not found:
    report_error()
  if mbr does not have boot flag:
    continue
  for partition in mbr:
    if partition is bootable and if parition type is PINTOS:
      try:
        done = false
        while not done:
          copy next 64 KiB of kernel
          if all 512 KiB are copied:
            done = true
        # goto start
        start running kernel
      catch:
        report_error()

report_error():
  print "error: unable to find or load os. aborting."
  # interrupt 0x18
  exit

>> A3: Did you have any difficulties making the entire bootloader fit
>> within the space allotted?  If so, what steps did you take to reduce
>> the size of your bootstrap code?

---- RATIONALE ----

>> A4: Why did you choose your final implementation?  Did you encounter
>> any major obstacles or difficulties that forced you to change your
>> approach?  If so, describe the obstacles and how you overcame them.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the feedback survey on the course
website.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
