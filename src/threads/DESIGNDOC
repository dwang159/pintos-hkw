 
			+--------------------+
			|       CS 124       |
			| PROJECT 3: THREADS |
			|   DESIGN DOCUMENT  |
			+--------------------+
				   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

Tim Holland <tholland@caltech.edu>
Daniel Kong <dkong@caltech.edu>
Daniel Wang <dwang@caltech.edu>

>> Specify how many late tokens you are using on this assignment: 0 

>> What is the Git repository and commit hash for your submission?

   Repository URL: http://github.com/dkong1796/pintos_hkw.git
   commit ...

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course instructors.

			     ALARM CLOCK
			     ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

In thread struct, added the following members:
    struct list_elem sleepelem
    unsigned int wait_ticks

sleepelem is used for maintaining a linked list of sleeping threads.

wait_ticks is the number of ticks when the sleeping thread should be awoken. To
calculate this value, whn a thread sleeps, we add the current tick counter to the
number of ticks it should wait.
    

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.
When we call timer_sleep, we disable interrupts, set the thread's wait_ticks 
to the ticks counter + the number of ticks to sleep, then insert the thread 
into a sleeping queue. The sleeping queue is kept in a sorted order by 
ascending wait_ticks values. Finally, we set the thread's status to 
THREAD_SLEEPING.

In the timer interrupt, we increment the ticks counter, update statistics
(as was done in the previous implementation), then wake up threads if
necessary. To do this, we iterate through the sleeping queue until we fail
to wake a thread. Because the list is in sorted order, we can stop looking
at threads at this point. Finally, we enforce preemption, as was done in the
previous implementation.

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?
We maintain the sleeping queue as sorted, allowing us to move the time spent
finding threads to be awoken into the thread_sleep function rather than
every timer interrupt. By keeping the list sorted, we reduce the number of
threads that we need to iterate through during each timer interrupt, making
the interrupt faster.

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?
We avoid race conditions by ensuring that only one thread can affect the
sleeping queue at a single time. This way, if multiple threads call
timer_sleep, queue operations won't interfere with each other and corrupt
the list.

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?
Because timer interrupts are turned off during queue operations, only one
thread is affecting the queue at a single time, again preventing corruption.

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?
Originally, we considered keeping an unsorted queue of sleeping threads.
However, this causes unnecessary time to be spent in timer interrupts, slowing
system performance. By keeping a sorted list, timer_sleep takes more time
(O(n), where n is the number of sleeping threads), but timer interrupts
take (O(w), where w is the number of threads that need to be awoken). Since
timer interrupts are much more frequent than timer_sleep calls, this is an
improvement over the O(n) timer interrupt of the previous design.

			 PRIORITY SCHEDULING
			 ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

			  ADVANCED SCHEDULER
			  ==================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0
 4
 8
12
16
20
24
28
32
36

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

>> C6: The assignment explains arithmetic for fixed-point math in
>> detail, but it leaves it open to you to implement it.  Why did you
>> decide to implement it the way you did?  If you created an
>> abstraction layer for fixed-point math, that is, an abstract data
>> type and/or a set of functions or macros to manipulate fixed-point
>> numbers, why did you do so?  If not, why not?

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the feedback survey on the course
website.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
